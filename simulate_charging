function results = simulate_charging(nDays, SOC_init, C_batt, P_grid_max, P_charge, n_LKW)

    %% --- Parameter ---
    T_day = 24*3600;     % Sekunden pro Tag
    dt = 60;             % Zeitschritt: 1 Minute
    time_day = 0:dt:T_day-dt;
    time = 0:dt:nDays*T_day-dt;

    eta_batt = 0.95;     % Batteriewirkungsgrad

    %% --- Speicherinitialisierung ---
    SOC = zeros(size(time));
    if SOC_init <= 1
        SOC(1) = SOC_init * C_batt; % SOC_init in [0..1] → %
    else
        SOC(1) = SOC_init; % SOC_init in kWh
    end

    P_grid       = zeros(size(time));
    P_grid_LKW   = zeros(size(time));
    P_grid_batt  = zeros(size(time));
    P_batt       = zeros(size(time));

    %% --- Simulation über mehrere Tage ---
    for day = 1:nDays
        % Beispiel-Lastprofil: sinusförmig mit Peak am Mittag
        idx_start = (day-1)*length(time_day)+1;
        idx_end   = day*length(time_day);
        t_day = time_day / T_day; % normierte Zeit 0..1

        % Ladeprofil (kann später durch CSV ersetzt werden)
        P_load = n_LKW * P_charge * (0.5 + 0.5*sin(2*pi*(t_day*2 - 0.25)));
        P_load(P_load < 0) = 0;

        % Schleife für den aktuellen Tag
        for k = idx_start+1:idx_end
            P_demand = P_load(k-idx_start+1);

            if P_demand <= P_grid_max
                % --- Netz deckt Last ---
                P_grid_LKW(k) = P_demand;

                % Batterie laden, falls nicht voll
                if SOC(k-1) < C_batt
                    P_grid_batt(k) = (P_grid_max - P_demand);
                    dE = P_grid_batt(k) * dt/3600 * eta_batt;
                    SOC(k) = min(SOC(k-1) + dE, C_batt);
                    P_batt(k) = - (SOC(k) - SOC(k-1)) * 3600/dt;
                else
                    P_grid_batt(k) = 0;
                    SOC(k) = SOC(k-1);
                    P_batt(k) = 0;
                end

                % Gesamter Netzbezug
                P_grid(k) = P_grid_LKW(k) + P_grid_batt(k);

            else
                % --- Netz am Limit -> Batterie muss helfen ---
                P_grid(k) = P_grid_max;
                P_grid_LKW(k) = P_grid_max;
                P_grid_batt(k) = 0;

                dE = (P_demand - P_grid_max) * dt/3600 / eta_batt;
                SOC(k) = max(SOC(k-1) - dE, 0);
                P_batt(k) = (SOC(k-1) - SOC(k)) * 3600/dt;
            end
        end
    end

    %% --- Energiestatistik ---
    E_grid_total = sum(P_grid * dt/3600);
    E_grid_LKW   = sum(P_grid_LKW * dt/3600);
    E_grid_batt  = sum(P_grid_batt * dt/3600);
    E_batt_out   = sum(P_batt(P_batt>0) * dt/3600);

    results = struct();
    results.time = time/3600; % Stunden
    results.P_grid = P_grid;
    results.P_grid_LKW = P_grid_LKW;
    results.P_grid_batt = P_grid_batt;
    results.P_batt = P_batt;
    results.SOC = SOC;
    results.energy = struct( ...
        'E_grid_total', E_grid_total, ...
        'E_grid_LKW', E_grid_LKW, ...
        'E_grid_batt', E_grid_batt, ...
        'E_batt_out', E_batt_out ...
    );

    %% --- Diagramme ---
    figure;
    subplot(3,1,1);
    plot(time/3600, P_grid,'b','LineWidth',1.2); hold on;
    plot(time/3600, P_batt,'r','LineWidth',1.2);
    legend('Netzbezug gesamt','Batterie');
    xlabel('Zeit [h]'); ylabel('Leistung [kW]');
    title('Gesamt-Leistungen');

    subplot(3,1,2);
    plot(time/3600, P_grid_LKW,'b','LineWidth',1.2); hold on;
    plot(time/3600, P_grid_batt,'g','LineWidth',1.2);
    legend('Netz für LKW','Netz für Batterie');
    xlabel('Zeit [h]'); ylabel('Leistung [kW]');
    title('Aufteilung Netzbezug');

    subplot(3,1,3);
    plot(time/3600, SOC,'m','LineWidth',1.2);
    xlabel('Zeit [h]'); ylabel('SOC [kWh]');
    title('Batterieladezustand über mehrere Tage');
end
